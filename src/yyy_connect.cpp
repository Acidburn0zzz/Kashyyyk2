// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "yyy_connect.hpp"
#include "yyy_assert.h"
#include "yyy_callbacks.h"
/**
 // Used to ensure this function is only called once, and to prevent memory leaks of extern'ed variables otherwise.
*/
static bool yyy_initialized = false; 

static Fl_Double_Window *connect_window=(Fl_Double_Window *)0;

Fl_Browser *recent_list=(Fl_Browser *)0;

static Fl_Input *uri_input=(Fl_Input *)0;

static Fl_Int_Input *port_input=(Fl_Int_Input *)0;

static void cb_port_input(Fl_Int_Input* o, void*) {
  if(o->value()[0] == '\0')
	o->static_value("1", 1);
}

static void cb_Clear(Fl_Button*, void*) {
  recent_list->clear();
}

static void cb_Connect(Fl_Return_Button*, void*) {
  const char *const uri = uri_input->value();
if(*uri != '\0'){
	YYY_Connect(uri, atoi(port_input->value()));
	connect_window->hide();
};
}

Fl_Double_Window* YYY_CreateConnectDialog() {
  YYY_Assert(yyy_initialized == false, "Connection dialog created more than once.");
  yyy_initialized = true;
  { connect_window = new Fl_Double_Window(555, 230);
    connect_window->color((Fl_Color)51);
    { recent_list = new Fl_Browser(15, 70, 395, 145, "Recent");
      recent_list->type(1);
      recent_list->selection_color((Fl_Color)133);
      recent_list->align(Fl_Align(FL_ALIGN_TOP));
    } // Fl_Browser* recent_list
    { uri_input = new Fl_Input(40, 15, 240, 25, "URI");
      uri_input->selection_color((Fl_Color)93);
    } // Fl_Input* uri_input
    { port_input = new Fl_Int_Input(320, 15, 90, 25, "Port");
      port_input->type(2);
      port_input->selection_color((Fl_Color)133);
      port_input->callback((Fl_Callback*)cb_port_input);
    } // Fl_Int_Input* port_input
    { Fl_Button* o = new Fl_Button(425, 70, 115, 25, "Clear Recent");
      o->box(FL_THIN_UP_BOX);
      o->callback((Fl_Callback*)cb_Clear);
    } // Fl_Button* o
    { Fl_Return_Button* o = new Fl_Return_Button(425, 15, 115, 25, "Connect");
      o->box(FL_THIN_UP_BOX);
      o->callback((Fl_Callback*)cb_Connect);
    } // Fl_Return_Button* o
    connect_window->end();
  } // Fl_Double_Window* connect_window
  return connect_window;
}
